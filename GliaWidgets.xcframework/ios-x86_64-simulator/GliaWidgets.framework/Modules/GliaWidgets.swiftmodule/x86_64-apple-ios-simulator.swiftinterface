// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GliaWidgets
import AVFoundation
import AVFoundation/*.AVMakeRect*/
import Foundation
@_exported import GliaWidgets
import MobileCoreServices
import PureLayout
import QuickLook
import QuickLookThumbnailing
import SQLite3
import SalemoveSDK
import Swift
import UIKit
@objc @_hasMissingDesignatedInitializers public class View : UIKit.UIView {
  @objc dynamic public init()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
public struct CallButtonStyle {
  public struct StateStyle {
    public let backgroundColor: UIKit.UIColor
    public let image: UIKit.UIImage
    public let imageColor: UIKit.UIColor
    public let title: Swift.String
    public let titleFont: UIKit.UIFont
    public let titleColor: UIKit.UIColor
  }
  public var active: GliaWidgets.CallButtonStyle.StateStyle
  public var inactive: GliaWidgets.CallButtonStyle.StateStyle
}
public struct UserImageStyle {
  public var placeholderImage: UIKit.UIImage?
  public var placeholderColor: UIKit.UIColor
  public var placeholderBackgroundColor: UIKit.UIColor
  public var imageBackgroundColor: UIKit.UIColor
  public init(placeholderImage: UIKit.UIImage?, placeholderColor: UIKit.UIColor, placeholderBackgroundColor: UIKit.UIColor, imageBackgroundColor: UIKit.UIColor)
}
public struct MessageAlertConfiguration {
  public var title: Swift.String?
  public var message: Swift.String?
  public init(title: Swift.String?, message: Swift.String?)
}
public class ChatFileContentStyle {
  public var backgroundColor: UIKit.UIColor
  public init(backgroundColor: UIKit.UIColor)
  @objc deinit
}
public class OperatorChatMessageStyle : GliaWidgets.ChatMessageStyle {
  public var operatorImage: GliaWidgets.UserImageStyle
  public init(text: GliaWidgets.ChatTextContentStyle, imageFile: GliaWidgets.ChatImageFileContentStyle, fileDownload: GliaWidgets.ChatFileDownloadStyle, operatorImage: GliaWidgets.UserImageStyle)
  override public init(text: GliaWidgets.ChatTextContentStyle, imageFile: GliaWidgets.ChatImageFileContentStyle, fileDownload: GliaWidgets.ChatFileDownloadStyle)
  @objc deinit
}
public struct ThemeColor {
  public var primary: UIKit.UIColor
  public var secondary: UIKit.UIColor
  public var baseNormal: UIKit.UIColor
  public var baseLight: UIKit.UIColor
  public var baseDark: UIKit.UIColor
  public var baseShade: UIKit.UIColor
  public var background: UIKit.UIColor
  public var systemNegative: UIKit.UIColor
  public init(primary: UIKit.UIColor? = nil, secondary: UIKit.UIColor? = nil, baseNormal: UIKit.UIColor? = nil, baseLight: UIKit.UIColor? = nil, baseDark: UIKit.UIColor? = nil, baseShade: UIKit.UIColor? = nil, background: UIKit.UIColor? = nil, systemNegative: UIKit.UIColor? = nil)
}
public struct UnreadMessageIndicatorStyle {
  public var badge: GliaWidgets.BadgeStyle
  public var userImage: GliaWidgets.UserImageStyle
  public init(badgeFont: UIKit.UIFont, badgeTextColor: UIKit.UIColor, badgeColor: UIKit.UIColor, placeholderImage: UIKit.UIImage?, placeholderColor: UIKit.UIColor, placeholderBackgroundColor: UIKit.UIColor, imageBackgroundColor: UIKit.UIColor)
}
public enum GliaViewControllerEvent {
  case minimized
  case maximized
  public static func == (a: GliaWidgets.GliaViewControllerEvent, b: GliaWidgets.GliaViewControllerEvent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol GliaViewControllerDelegate : AnyObject {
  func event(_ event: GliaWidgets.GliaViewControllerEvent)
}
public class ChatTextContentStyle {
  public var textFont: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public init(textFont: UIKit.UIFont, textColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
  @objc deinit
}
public enum EngagementKind {
  case none
  case chat
  case audioCall
  case videoCall
  public static func == (a: GliaWidgets.EngagementKind, b: GliaWidgets.EngagementKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum GliaEvent {
  case started
  case engagementChanged(GliaWidgets.EngagementKind)
  case ended
  case minimized
  case maximized
}
public protocol SceneProvider : AnyObject {
  @available(iOS 13.0, *)
  func windowScene() -> UIKit.UIWindowScene?
}
@_hasMissingDesignatedInitializers public class Glia {
  public static let sharedInstance: GliaWidgets.Glia
  public var engagement: GliaWidgets.EngagementKind {
    get
  }
  public var onEvent: ((GliaWidgets.GliaEvent) -> Swift.Void)?
  public func start(_ engagementKind: GliaWidgets.EngagementKind, configuration: GliaWidgets.Configuration, queueID: Swift.String, visitorContext: SalemoveSDK.VisitorContext, theme: GliaWidgets.Theme = Theme(), sceneProvider: GliaWidgets.SceneProvider? = nil) throws
  @objc deinit
}
public protocol ViewModel {
  associatedtype Event
  associatedtype Action
  associatedtype DelegateEvent
  func event(_ event: Self.Event)
  var action: ((Self.Action) -> Swift.Void)? { get set }
  var delegate: ((Self.DelegateEvent) -> Swift.Void)? { get set }
}
public class ObservableValue<T> {
  public typealias Update = (T, T) -> Swift.Void
  public var value: T {
    get
    set
  }
  public init(with object: T)
  public func addObserver(_ observer: Swift.AnyObject, update: @escaping GliaWidgets.ObservableValue<T>.Update)
  public func removeObserver(_ observer: Swift.AnyObject)
  @objc deinit
}
public struct AlertConfiguration {
  public var leaveQueue: GliaWidgets.ConfirmationAlertConfiguration
  public var endEngagement: GliaWidgets.ConfirmationAlertConfiguration
  public var operatorsUnavailable: GliaWidgets.MessageAlertConfiguration
  public var mediaUpgrade: GliaWidgets.MultipleMediaUpgradeAlertConfiguration
  public var audioUpgrade: GliaWidgets.SingleMediaUpgradeAlertConfiguration
  public var oneWayVideoUpgrade: GliaWidgets.SingleMediaUpgradeAlertConfiguration
  public var twoWayVideoUpgrade: GliaWidgets.SingleMediaUpgradeAlertConfiguration
  public var screenShareOffer: GliaWidgets.ScreenShareOfferAlertConfiguration
  public var endScreenShare: GliaWidgets.ConfirmationAlertConfiguration
  public var microphoneSettings: GliaWidgets.SettingsAlertConfiguration
  public var cameraSettings: GliaWidgets.SettingsAlertConfiguration
  public var mediaSourceNotAvailable: GliaWidgets.MessageAlertConfiguration
  public var unexpectedError: GliaWidgets.MessageAlertConfiguration
  public var apiError: GliaWidgets.MessageAlertConfiguration
  public init(leaveQueue: GliaWidgets.ConfirmationAlertConfiguration, endEngagement: GliaWidgets.ConfirmationAlertConfiguration, operatorsUnavailable: GliaWidgets.MessageAlertConfiguration, mediaUpgrade: GliaWidgets.MultipleMediaUpgradeAlertConfiguration, audioUpgrade: GliaWidgets.SingleMediaUpgradeAlertConfiguration, oneWayVideoUpgrade: GliaWidgets.SingleMediaUpgradeAlertConfiguration, twoWayVideoUpgrade: GliaWidgets.SingleMediaUpgradeAlertConfiguration, screenShareOffer: GliaWidgets.ScreenShareOfferAlertConfiguration, endScreenShare: GliaWidgets.ConfirmationAlertConfiguration, microphoneSettings: GliaWidgets.SettingsAlertConfiguration, cameraSettings: GliaWidgets.SettingsAlertConfiguration, mediaSourceNotAvailable: GliaWidgets.MessageAlertConfiguration, unexpectedError: GliaWidgets.MessageAlertConfiguration, apiError: GliaWidgets.MessageAlertConfiguration)
}
public struct ConnectOperatorStyle {
  public var operatorImage: GliaWidgets.UserImageStyle
  public var animationColor: UIKit.UIColor
  public init(operatorImage: GliaWidgets.UserImageStyle, animationColor: UIKit.UIColor)
}
public class ItemListStyle {
  public var items: [GliaWidgets.ListItemStyle]
  public var separatorColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public init(items: [GliaWidgets.ListItemStyle], separatorColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
  @objc deinit
}
public class FileUploadListStyle {
  public var item: GliaWidgets.FileUploadStyle
  public init(item: GliaWidgets.FileUploadStyle)
  @objc deinit
}
public class ChatFileDownloadStyle : GliaWidgets.ChatFileContentStyle {
  public var fileImage: GliaWidgets.FileImageStyle
  public var download: GliaWidgets.ChatFileDownloadStateStyle
  public var downloading: GliaWidgets.ChatFileDownloadStateStyle
  public var open: GliaWidgets.ChatFileDownloadStateStyle
  public var error: GliaWidgets.ChatFileDownloadErrorStateStyle
  public var progressColor: UIKit.UIColor
  public var errorProgressColor: UIKit.UIColor
  public var progressBackgroundColor: UIKit.UIColor
  public var borderColor: UIKit.UIColor
  public init(fileImage: GliaWidgets.FileImageStyle, download: GliaWidgets.ChatFileDownloadStateStyle, downloading: GliaWidgets.ChatFileDownloadStateStyle, open: GliaWidgets.ChatFileDownloadStateStyle, error: GliaWidgets.ChatFileDownloadErrorStateStyle, progressColor: UIKit.UIColor, errorProgressColor: UIKit.UIColor, progressBackgroundColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, borderColor: UIKit.UIColor)
  override public init(backgroundColor: UIKit.UIColor)
  @objc deinit
}
public class ChatFileDownloadStateStyle {
  public var text: Swift.String
  public var font: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public var infoFont: UIKit.UIFont
  public var infoColor: UIKit.UIColor
  public init(text: Swift.String, font: UIKit.UIFont, textColor: UIKit.UIColor, infoFont: UIKit.UIFont, infoColor: UIKit.UIColor)
  @objc deinit
}
public class ChatFileDownloadErrorStateStyle {
  public var text: Swift.String
  public var font: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public var infoFont: UIKit.UIFont
  public var infoColor: UIKit.UIColor
  public var separatorText: Swift.String
  public var separatorFont: UIKit.UIFont
  public var separatorTextColor: UIKit.UIColor
  public var retryText: Swift.String
  public var retryFont: UIKit.UIFont
  public var retryTextColor: UIKit.UIColor
  public init(text: Swift.String, font: UIKit.UIFont, textColor: UIKit.UIColor, infoFont: UIKit.UIFont, infoColor: UIKit.UIColor, separatorText: Swift.String, separatorFont: UIKit.UIFont, separatorTextColor: UIKit.UIColor, retryText: Swift.String, retryFont: UIKit.UIFont, retryTextColor: UIKit.UIColor)
  @objc deinit
}
public struct HeaderButtonStyle {
  public var image: UIKit.UIImage
  public var color: UIKit.UIColor
  public init(image: UIKit.UIImage, color: UIKit.UIColor)
}
@objc @_hasMissingDesignatedInitializers public class ChatMessageEntryView : UIKit.UIView {
  public init(with style: GliaWidgets.ChatMessageEntryStyle)
  @objc override dynamic public func layoutSubviews()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
extension ChatMessageEntryView : UIKit.UITextViewDelegate {
  @objc dynamic public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @objc dynamic public func textViewDidChange(_ textView: UIKit.UITextView)
  @objc dynamic public func textViewDidBeginEditing(_: UIKit.UITextView)
  @objc dynamic public func textViewDidEndEditing(_ textView: UIKit.UITextView)
}
public struct MessageButtonStyle {
  public var image: UIKit.UIImage
  public var color: UIKit.UIColor
  public init(image: UIKit.UIImage, color: UIKit.UIColor)
}
@_inheritsConvenienceInitializers public class ChatImageFileContentStyle : GliaWidgets.ChatFileContentStyle {
  override public init(backgroundColor: UIKit.UIColor)
  @objc deinit
}
public enum ThemeFontStyle {
  case `default`
  case defaultLarge
  case custom(GliaWidgets.ThemeFont)
}
public class ChatMessageStyle {
  public var text: GliaWidgets.ChatTextContentStyle
  public var imageFile: GliaWidgets.ChatImageFileContentStyle
  public var fileDownload: GliaWidgets.ChatFileDownloadStyle
  public init(text: GliaWidgets.ChatTextContentStyle, imageFile: GliaWidgets.ChatImageFileContentStyle, fileDownload: GliaWidgets.ChatFileDownloadStyle)
  @objc deinit
}
public enum L10n {
  public static let `operator`: Swift.String
  public static let poweredBy: Swift.String
  public enum Alert {
    public enum Action {
      public static let accept: Swift.String
      public static let cancel: Swift.String
      public static let decline: Swift.String
      public static let no: Swift.String
      public static let ok: Swift.String
      public static let settings: Swift.String
      public static let yes: Swift.String
    }
    public enum ApiError {
      public static let message: Swift.String
      public static let title: Swift.String
    }
    public enum AudioUpgrade {
      public static let title: Swift.String
    }
    public enum CameraPermission {
      public static let message: Swift.String
      public static let title: Swift.String
    }
    public enum EndEngagement {
      public static let message: Swift.String
      public static let title: Swift.String
    }
    public enum LeaveQueue {
      public static let message: Swift.String
      public static let title: Swift.String
    }
    public enum MediaSourceNotAvailable {
      public static let message: Swift.String
      public static let title: Swift.String
    }
    public enum MediaUpgrade {
      public static let title: Swift.String
      public enum Audio {
        public static let info: Swift.String
        public static let title: Swift.String
      }
      public enum Phone {
        public static let info: Swift.String
        public static let title: Swift.String
      }
    }
    public enum MicrophonePermission {
      public static let message: Swift.String
      public static let title: Swift.String
    }
    public enum OperatorsUnavailable {
      public static let message: Swift.String
      public static let title: Swift.String
    }
    public enum ScreenSharing {
      public enum Start {
        public static let message: Swift.String
        public static let title: Swift.String
      }
      public enum Stop {
        public static let message: Swift.String
        public static let title: Swift.String
      }
    }
    public enum Unexpected {
      public static let message: Swift.String
      public static let title: Swift.String
    }
    public enum VideoUpgrade {
      public enum OneWay {
        public static let title: Swift.String
      }
      public enum TwoWay {
        public static let title: Swift.String
      }
    }
  }
  public enum Call {
    public static let bottomText: Swift.String
    public static let topText: Swift.String
    public enum Audio {
      public static let title: Swift.String
    }
    public enum Buttons {
      public enum Chat {
        public static let title: Swift.String
      }
      public enum Minimize {
        public static let title: Swift.String
      }
      public enum Mute {
        public enum Active {
          public static let title: Swift.String
        }
        public enum Inactive {
          public static let title: Swift.String
        }
      }
      public enum Speaker {
        public static let title: Swift.String
      }
      public enum Video {
        public static let title: Swift.String
      }
    }
    public enum Connect {
      public enum Connected {
        public static let firstText: Swift.String
        public static let secondText: Swift.String
      }
      public enum Connecting {
        public static let firstText: Swift.String
        public static let secondText: Swift.String
      }
      public enum Queue {
        public static let firstText: Swift.String
        public static let secondText: Swift.String
      }
    }
    public enum EndButton {
      public static let title: Swift.String
    }
    public enum Operator {
      public static let name: Swift.String
    }
    public enum Video {
      public static let title: Swift.String
    }
  }
  public enum Chat {
    public static let title: Swift.String
    public enum Connect {
      public enum Connected {
        public static let firstText: Swift.String
        public static let secondText: Swift.String
      }
      public enum Connecting {
        public static let firstText: Swift.String
        public static let secondText: Swift.String
      }
      public enum Queue {
        public static let firstText: Swift.String
        public static let secondText: Swift.String
      }
    }
    public enum Download {
      public static let download: Swift.String
      public static let downloading: Swift.String
      public static let failed: Swift.String
      public static let open: Swift.String
      public enum Failed {
        public static let retry: Swift.String
        public static let separator: Swift.String
      }
    }
    public enum EndButton {
      public static let title: Swift.String
    }
    public enum Message {
      public static let choiceCardPlaceholder: Swift.String
      public static let placeholder: Swift.String
      public enum Status {
        public static let delivered: Swift.String
      }
    }
    public enum PickMedia {
      public static let browse: Swift.String
      public static let photo: Swift.String
      public static let takePhoto: Swift.String
    }
    public enum Upgrade {
      public enum Audio {
        public static let text: Swift.String
      }
      public enum Video {
        public static let text: Swift.String
      }
    }
    public enum Upload {
      public static let failed: Swift.String
      public static let uploaded: Swift.String
      public static let uploading: Swift.String
      public enum Error {
        public static let fileTooBig: Swift.String
        public static let generic: Swift.String
        public static let network: Swift.String
        public static let safetyCheckFailed: Swift.String
        public static let unsupportedFileType: Swift.String
      }
    }
  }
}
public struct ChatMessageEntryStyle {
  public var messageFont: UIKit.UIFont
  public var messageColor: UIKit.UIColor
  public var placeholder: Swift.String
  public var choiceCardPlaceholder: Swift.String
  public var placeholderFont: UIKit.UIFont
  public var placeholderColor: UIKit.UIColor
  public var separatorColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var mediaButton: GliaWidgets.MessageButtonStyle
  public var sendButton: GliaWidgets.MessageButtonStyle
  public var uploadList: GliaWidgets.FileUploadListStyle
  public init(messageFont: UIKit.UIFont, messageColor: UIKit.UIColor, placeholder: Swift.String, choiceCardPlaceholder: Swift.String, placeholderFont: UIKit.UIFont, placeholderColor: UIKit.UIColor, separatorColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, mediaButton: GliaWidgets.MessageButtonStyle, sendButton: GliaWidgets.MessageButtonStyle, uploadList: GliaWidgets.FileUploadListStyle)
}
public class ChatCallUpgradeStyle {
  public var icon: UIKit.UIImage
  public var iconColor: UIKit.UIColor
  public var text: Swift.String
  public var textFont: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public var durationFont: UIKit.UIFont
  public var durationColor: UIKit.UIColor
  public var borderColor: UIKit.UIColor
  public init(icon: UIKit.UIImage, iconColor: UIKit.UIColor, text: Swift.String, textFont: UIKit.UIFont, textColor: UIKit.UIColor, durationFont: UIKit.UIFont, durationColor: UIKit.UIColor, borderColor: UIKit.UIColor)
  @objc deinit
}
public class Theme {
  final public let color: GliaWidgets.ThemeColor
  final public let font: GliaWidgets.ThemeFont
  public var chat: GliaWidgets.ChatStyle {
    get
    set
  }
  public var call: GliaWidgets.CallStyle {
    get
    set
  }
  public var alert: GliaWidgets.AlertStyle {
    get
    set
  }
  public var alertConfiguration: GliaWidgets.AlertConfiguration {
    get
    set
  }
  public var minimizedBubble: GliaWidgets.BubbleStyle {
    get
    set
  }
  public var showsPoweredBy: Swift.Bool
  public init(colorStyle: GliaWidgets.ThemeColorStyle = .default, fontStyle: GliaWidgets.ThemeFontStyle = .default, showsPoweredBy: Swift.Bool = true)
  @objc deinit
}
public struct BadgeStyle {
  public var font: UIKit.UIFont
  public var fontColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public init(font: UIKit.UIFont, fontColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
}
public class VisitorChatMessageStyle : GliaWidgets.ChatMessageStyle {
  public var statusFont: UIKit.UIFont
  public var statusColor: UIKit.UIColor
  public var delivered: Swift.String
  public init(text: GliaWidgets.ChatTextContentStyle, imageFile: GliaWidgets.ChatImageFileContentStyle, fileDownload: GliaWidgets.ChatFileDownloadStyle, statusFont: UIKit.UIFont, statusColor: UIKit.UIColor, delivered: Swift.String)
  override public init(text: GliaWidgets.ChatTextContentStyle, imageFile: GliaWidgets.ChatImageFileContentStyle, fileDownload: GliaWidgets.ChatFileDownloadStyle)
  @objc deinit
}
public struct HeaderStyle {
  public var titleFont: UIKit.UIFont
  public var titleColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public init(titleFont: UIKit.UIFont, titleColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
}
public class FileUploadStyle {
  public var fileImage: GliaWidgets.FileImageStyle
  public var uploading: GliaWidgets.FileUploadStateStyle
  public var uploaded: GliaWidgets.FileUploadStateStyle
  public var error: GliaWidgets.FileUploadErrorStateStyle
  public var progressColor: UIKit.UIColor
  public var errorProgressColor: UIKit.UIColor
  public var progressBackgroundColor: UIKit.UIColor
  public var removeButtonImage: UIKit.UIImage
  public var removeButtonColor: UIKit.UIColor
  public init(fileImage: GliaWidgets.FileImageStyle, uploading: GliaWidgets.FileUploadStateStyle, uploaded: GliaWidgets.FileUploadStateStyle, error: GliaWidgets.FileUploadErrorStateStyle, progressColor: UIKit.UIColor, errorProgressColor: UIKit.UIColor, progressBackgroundColor: UIKit.UIColor, removeButtonImage: UIKit.UIImage, removeButtonColor: UIKit.UIColor)
  @objc deinit
}
public class FileUploadStateStyle {
  public var text: Swift.String
  public var font: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public var infoFont: UIKit.UIFont
  public var infoColor: UIKit.UIColor
  public init(text: Swift.String, font: UIKit.UIFont, textColor: UIKit.UIColor, infoFont: UIKit.UIFont, infoColor: UIKit.UIColor)
  @objc deinit
}
public class FileUploadErrorStateStyle {
  public var text: Swift.String
  public var font: UIKit.UIFont
  public var textColor: UIKit.UIColor
  public var infoFont: UIKit.UIFont
  public var infoColor: UIKit.UIColor
  public var infoFileTooBig: Swift.String
  public var infoUnsupportedFileType: Swift.String
  public var infoSafetyCheckFailed: Swift.String
  public var infoNetworkError: Swift.String
  public var infoGenericError: Swift.String
  public init(text: Swift.String, font: UIKit.UIFont, textColor: UIKit.UIColor, infoFont: UIKit.UIFont, infoColor: UIKit.UIColor, infoFileTooBig: Swift.String, infoUnsupportedFileType: Swift.String, infoSafetyCheckFailed: Swift.String, infoNetworkError: Swift.String, infoGenericError: Swift.String)
  @objc deinit
}
public struct ActionButtonStyle {
  public var title: Swift.String
  public var titleFont: UIKit.UIFont
  public var titleColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public init(title: Swift.String, titleFont: UIKit.UIFont, titleColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
}
public class BubbleStyle {
  public var userImage: GliaWidgets.UserImageStyle
  public var badge: GliaWidgets.BadgeStyle?
  public init(userImage: GliaWidgets.UserImageStyle, badge: GliaWidgets.BadgeStyle? = nil)
  @objc deinit
}
public struct MediaUpgradeActionStyle {
  public var title: Swift.String
  public var titleFont: UIKit.UIFont
  public var titleColor: UIKit.UIColor
  public var info: Swift.String
  public var infoFont: UIKit.UIFont
  public var infoColor: UIKit.UIColor
  public var borderColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var icon: UIKit.UIImage
  public var iconColor: UIKit.UIColor
  public init(title: Swift.String, titleFont: UIKit.UIFont, titleColor: UIKit.UIColor, info: Swift.String, infoFont: UIKit.UIFont, infoColor: UIKit.UIColor, borderColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, icon: UIKit.UIImage, iconColor: UIKit.UIColor)
}
public enum ThemeColorStyle {
  case `default`
  case custom(GliaWidgets.ThemeColor)
}
public class EngagementStyle {
  public var header: GliaWidgets.HeaderStyle
  public var connect: GliaWidgets.ConnectStyle
  public var backgroundColor: UIKit.UIColor
  public var endButton: GliaWidgets.ActionButtonStyle
  public var endScreenShareButton: GliaWidgets.HeaderButtonStyle
  public var preferredStatusBarStyle: UIKit.UIStatusBarStyle
  public init(header: GliaWidgets.HeaderStyle, connect: GliaWidgets.ConnectStyle, backgroundColor: UIKit.UIColor, endButton: GliaWidgets.ActionButtonStyle, endScreenShareButton: GliaWidgets.HeaderButtonStyle, preferredStatusBarStyle: UIKit.UIStatusBarStyle)
  @objc deinit
}
public struct ConnectStyle {
  public var connectOperator: GliaWidgets.ConnectOperatorStyle
  public var queue: GliaWidgets.ConnectStatusStyle
  public var connecting: GliaWidgets.ConnectStatusStyle
  public var connected: GliaWidgets.ConnectStatusStyle
  public init(queueOperator: GliaWidgets.ConnectOperatorStyle, queue: GliaWidgets.ConnectStatusStyle, connecting: GliaWidgets.ConnectStatusStyle, connected: GliaWidgets.ConnectStatusStyle)
}
public enum Environment {
  case europe
  case usa
  case beta
  public static func == (a: GliaWidgets.Environment, b: GliaWidgets.Environment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Configuration {
  public let appToken: Swift.String
  public let apiToken: Swift.String
  public let environment: GliaWidgets.Environment
  public let site: Swift.String
  public init(appToken: Swift.String, apiToken: Swift.String, environment: GliaWidgets.Environment, site: Swift.String)
}
public class ListItemStyle {
  public var kind: GliaWidgets.ListItemKind
  public var title: Swift.String
  public var titleFont: UIKit.UIFont
  public var titleColor: UIKit.UIColor
  public var icon: UIKit.UIImage?
  public var iconColor: UIKit.UIColor?
  public init(kind: GliaWidgets.ListItemKind, title: Swift.String, titleFont: UIKit.UIFont, titleColor: UIKit.UIColor, icon: UIKit.UIImage?, iconColor: UIKit.UIColor?)
  @objc deinit
}
public struct ConnectStatusStyle {
  public var firstText: Swift.String?
  public var firstTextFont: UIKit.UIFont
  public var firstTextFontColor: UIKit.UIColor
  public var secondText: Swift.String?
  public var secondTextFont: UIKit.UIFont
  public var secondTextFontColor: UIKit.UIColor
  public init(firstText: Swift.String?, firstTextFont: UIKit.UIFont, firstTextFontColor: UIKit.UIColor, secondText: Swift.String?, secondTextFont: UIKit.UIFont, secondTextFontColor: UIKit.UIColor)
}
public struct MultipleMediaUpgradeAlertConfiguration {
  public var title: Swift.String
  public var audioUpgradeAction: GliaWidgets.MediaUpgradeActionStyle
  public var phoneUpgradeAction: GliaWidgets.MediaUpgradeActionStyle
  public var showsPoweredBy: Swift.Bool
}
final public class KeyboardObserver {
  public struct Properties {
    public let duration: Swift.Double
    public let finalFrame: CoreGraphics.CGRect
    public let animationOptions: UIKit.UIView.AnimationOptions
    public init?(with notification: Foundation.Notification)
  }
  final public var currentKeyboardHeight: CoreGraphics.CGFloat
  final public var keyboardWillShow: ((GliaWidgets.KeyboardObserver.Properties) -> Swift.Void)?
  final public var keyboardWillHide: ((GliaWidgets.KeyboardObserver.Properties) -> Swift.Void)?
  public init()
  @objc deinit
}
public struct ConfirmationAlertConfiguration {
  public var title: Swift.String?
  public var message: Swift.String?
  public var negativeTitle: Swift.String?
  public var positiveTitle: Swift.String?
  public var switchButtonBackgroundColors: Swift.Bool
  public var showsPoweredBy: Swift.Bool
}
public class ChoiceCardOptionStyle {
  public var normal: GliaWidgets.ChatTextContentStyle
  public var selected: GliaWidgets.ChatTextContentStyle
  public var disabled: GliaWidgets.ChatTextContentStyle
  public init(textFont: UIKit.UIFont, normalTextColor: UIKit.UIColor, normalBackgroundColor: UIKit.UIColor, highlightedTextColor: UIKit.UIColor, highlightedBackgroundColor: UIKit.UIColor, disabledTextColor: UIKit.UIColor, disabledBackgroundColor: UIKit.UIColor)
  @objc deinit
}
final public class ChoiceCardStyle : GliaWidgets.OperatorChatMessageStyle {
  final public var frameColor: UIKit.UIColor
  final public var choiceOption: GliaWidgets.ChoiceCardOptionStyle
  public init(mainText: GliaWidgets.ChatTextContentStyle, frameColor: UIKit.UIColor, imageFile: GliaWidgets.ChatImageFileContentStyle, fileDownload: GliaWidgets.ChatFileDownloadStyle, operatorImage: GliaWidgets.UserImageStyle, choiceOption: GliaWidgets.ChoiceCardOptionStyle)
  override public init(text: GliaWidgets.ChatTextContentStyle, imageFile: GliaWidgets.ChatImageFileContentStyle, fileDownload: GliaWidgets.ChatFileDownloadStyle, operatorImage: GliaWidgets.UserImageStyle)
  @objc deinit
}
@available(*, deprecated, renamed: "ImageAsset.Image", message: "This typealias will be removed in SwiftGen 7.0")
public typealias AssetImageTypeAlias = GliaWidgets.ImageAsset.Image
public enum Asset {
  public static let alertClose: GliaWidgets.ImageAsset
  public static let callChat: GliaWidgets.ImageAsset
  public static let callMiminize: GliaWidgets.ImageAsset
  public static let callMuteActive: GliaWidgets.ImageAsset
  public static let callMuteInactive: GliaWidgets.ImageAsset
  public static let callSpeakerActive: GliaWidgets.ImageAsset
  public static let callSpeakerInactive: GliaWidgets.ImageAsset
  public static let callVideoActive: GliaWidgets.ImageAsset
  public static let callVideoInactive: GliaWidgets.ImageAsset
  public static let uploadError: GliaWidgets.ImageAsset
  public static let uploadRemove: GliaWidgets.ImageAsset
  public static let chatPickMedia: GliaWidgets.ImageAsset
  public static let chatSend: GliaWidgets.ImageAsset
  public static let unreadMessageIndicator: GliaWidgets.ImageAsset
  public static let back: GliaWidgets.ImageAsset
  public static let close: GliaWidgets.ImageAsset
  public static let browseIcon: GliaWidgets.ImageAsset
  public static let cameraIcon: GliaWidgets.ImageAsset
  public static let photoLibraryIcon: GliaWidgets.ImageAsset
  public static let gliaLogo: GliaWidgets.ImageAsset
  public static let startScreenShare: GliaWidgets.ImageAsset
  public static let upgradeAudio: GliaWidgets.ImageAsset
  public static let upgradePhone: GliaWidgets.ImageAsset
  public static let upgradeVideo: GliaWidgets.ImageAsset
  public static let operatorPlaceholder: GliaWidgets.ImageAsset
}
public struct ImageAsset {
  public var name: Swift.String {
    get
  }
  public typealias Image = UIKit.UIImage
  public var image: GliaWidgets.ImageAsset.Image {
    get
  }
}
extension UIImage {
  @available(macOS, deprecated, message: "This initializer is unsafe on macOS, please use the ImageAsset.image property")
  convenience public init!(asset: GliaWidgets.ImageAsset)
}
public class FileImageStyle {
  public var fileFont: UIKit.UIFont
  public var fileColor: UIKit.UIColor
  public var errorIcon: UIKit.UIImage
  public var errorIconColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var errorBackgroundColor: UIKit.UIColor
  public init(fileFont: UIKit.UIFont, fileColor: UIKit.UIColor, errorIcon: UIKit.UIImage, errorIconColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, errorBackgroundColor: UIKit.UIColor)
  @objc deinit
}
public enum ListItemKind {
  case photoLibrary
  case takePhoto
  case browse
  public static func == (a: GliaWidgets.ListItemKind, b: GliaWidgets.ListItemKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CallButtonBarStyle {
  public var chatButton: GliaWidgets.CallButtonStyle
  public var videoButton: GliaWidgets.CallButtonStyle
  public var muteButton: GliaWidgets.CallButtonStyle
  public var speakerButton: GliaWidgets.CallButtonStyle
  public var minimizeButton: GliaWidgets.CallButtonStyle
  public var badge: GliaWidgets.BadgeStyle
}
public struct AlertStyle {
  public var titleFont: UIKit.UIFont
  public var titleColor: UIKit.UIColor
  public var titleImageColor: UIKit.UIColor
  public var messageFont: UIKit.UIFont
  public var messageColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var closeButtonColor: UIKit.UIColor
  public var positiveAction: GliaWidgets.ActionButtonStyle
  public var negativeAction: GliaWidgets.ActionButtonStyle
  public init(titleFont: UIKit.UIFont, titleColor: UIKit.UIColor, titleImageColor: UIKit.UIColor, messageFont: UIKit.UIFont, messageColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, closeButtonColor: UIKit.UIColor, positiveAction: GliaWidgets.ActionButtonStyle, negativeAction: GliaWidgets.ActionButtonStyle)
}
public struct ThemeFont {
  public var header1: UIKit.UIFont
  public var header2: UIKit.UIFont
  public var header3: UIKit.UIFont
  public var bodyText: UIKit.UIFont
  public var subtitle: UIKit.UIFont
  public var mediumSubtitle: UIKit.UIFont
  public var caption: UIKit.UIFont
  public var buttonLabel: UIKit.UIFont
  public init(header1: UIKit.UIFont? = nil, header2: UIKit.UIFont? = nil, header3: UIKit.UIFont? = nil, bodyText: UIKit.UIFont? = nil, subtitle: UIKit.UIFont? = nil, mediumSubtitle: UIKit.UIFont? = nil, caption: UIKit.UIFont? = nil, buttonLabel: UIKit.UIFont? = nil)
}
public struct SettingsAlertConfiguration {
  public var title: Swift.String
  public var message: Swift.String
  public var settingsTitle: Swift.String?
  public var cancelTitle: Swift.String?
}
public struct SingleMediaUpgradeAlertConfiguration {
  public var title: Swift.String
  public var titleImage: UIKit.UIImage?
  public var decline: Swift.String
  public var accept: Swift.String
  public var showsPoweredBy: Swift.Bool
}
public struct ScreenShareOfferAlertConfiguration {
  public var title: Swift.String
  public var message: Swift.String
  public var titleImage: UIKit.UIImage?
  public var decline: Swift.String
  public var accept: Swift.String
  public var showsPoweredBy: Swift.Bool
}
public class CallStyle : GliaWidgets.EngagementStyle {
  public var audioTitle: Swift.String
  public var videoTitle: Swift.String
  public var backButton: GliaWidgets.HeaderButtonStyle
  public var closeButton: GliaWidgets.HeaderButtonStyle
  public var operatorName: Swift.String
  public var operatorNameFont: UIKit.UIFont
  public var operatorNameColor: UIKit.UIColor
  public var durationFont: UIKit.UIFont
  public var durationColor: UIKit.UIColor
  public var topText: Swift.String
  public var topTextFont: UIKit.UIFont
  public var topTextColor: UIKit.UIColor
  public var bottomText: Swift.String
  public var bottomTextFont: UIKit.UIFont
  public var bottomTextColor: UIKit.UIColor
  public var buttonBar: GliaWidgets.CallButtonBarStyle
  public init(header: GliaWidgets.HeaderStyle, connect: GliaWidgets.ConnectStyle, backgroundColor: UIKit.UIColor, endButton: GliaWidgets.ActionButtonStyle, endScreenShareButton: GliaWidgets.HeaderButtonStyle, preferredStatusBarStyle: UIKit.UIStatusBarStyle, audioTitle: Swift.String, videoTitle: Swift.String, backButton: GliaWidgets.HeaderButtonStyle, closeButton: GliaWidgets.HeaderButtonStyle, operatorName: Swift.String, operatorNameFont: UIKit.UIFont, operatorNameColor: UIKit.UIColor, durationFont: UIKit.UIFont, durationColor: UIKit.UIColor, topText: Swift.String, topTextFont: UIKit.UIFont, topTextColor: UIKit.UIColor, bottomText: Swift.String, bottomTextFont: UIKit.UIFont, bottomTextColor: UIKit.UIColor, buttonBar: GliaWidgets.CallButtonBarStyle)
  override public init(header: GliaWidgets.HeaderStyle, connect: GliaWidgets.ConnectStyle, backgroundColor: UIKit.UIColor, endButton: GliaWidgets.ActionButtonStyle, endScreenShareButton: GliaWidgets.HeaderButtonStyle, preferredStatusBarStyle: UIKit.UIStatusBarStyle)
  @objc deinit
}
public class ChatStyle : GliaWidgets.EngagementStyle {
  public var title: Swift.String
  public var backButton: GliaWidgets.HeaderButtonStyle
  public var closeButton: GliaWidgets.HeaderButtonStyle
  public var visitorMessage: GliaWidgets.VisitorChatMessageStyle
  public var operatorMessage: GliaWidgets.OperatorChatMessageStyle
  public var choiceCard: GliaWidgets.ChoiceCardStyle
  public var messageEntry: GliaWidgets.ChatMessageEntryStyle
  public var audioUpgrade: GliaWidgets.ChatCallUpgradeStyle
  public var videoUpgrade: GliaWidgets.ChatCallUpgradeStyle
  public var callBubble: GliaWidgets.BubbleStyle
  public var pickMedia: GliaWidgets.ItemListStyle
  public var unreadMessageIndicator: GliaWidgets.UnreadMessageIndicatorStyle
  public init(header: GliaWidgets.HeaderStyle, connect: GliaWidgets.ConnectStyle, backgroundColor: UIKit.UIColor, endButton: GliaWidgets.ActionButtonStyle, endScreenShareButton: GliaWidgets.HeaderButtonStyle, preferredStatusBarStyle: UIKit.UIStatusBarStyle, title: Swift.String, backButton: GliaWidgets.HeaderButtonStyle, closeButton: GliaWidgets.HeaderButtonStyle, visitorMessage: GliaWidgets.VisitorChatMessageStyle, operatorMessage: GliaWidgets.OperatorChatMessageStyle, choiceCard: GliaWidgets.ChoiceCardStyle, messageEntry: GliaWidgets.ChatMessageEntryStyle, audioUpgrade: GliaWidgets.ChatCallUpgradeStyle, videoUpgrade: GliaWidgets.ChatCallUpgradeStyle, callBubble: GliaWidgets.BubbleStyle, pickMedia: GliaWidgets.ItemListStyle, unreadMessageIndicator: GliaWidgets.UnreadMessageIndicatorStyle)
  override public init(header: GliaWidgets.HeaderStyle, connect: GliaWidgets.ConnectStyle, backgroundColor: UIKit.UIColor, endButton: GliaWidgets.ActionButtonStyle, endScreenShareButton: GliaWidgets.HeaderButtonStyle, preferredStatusBarStyle: UIKit.UIStatusBarStyle)
  @objc deinit
}
extension GliaWidgets.GliaViewControllerEvent : Swift.Equatable {}
extension GliaWidgets.GliaViewControllerEvent : Swift.Hashable {}
extension GliaWidgets.EngagementKind : Swift.Equatable {}
extension GliaWidgets.EngagementKind : Swift.Hashable {}
extension GliaWidgets.Environment : Swift.Equatable {}
extension GliaWidgets.Environment : Swift.Hashable {}
extension GliaWidgets.ListItemKind : Swift.Equatable {}
extension GliaWidgets.ListItemKind : Swift.Hashable {}
