#if DEBUG
@_spi(GliaWidgets) import GliaCoreSDK

// swiftlint:disable line_length
extension EngagementCoordinator.Environment {
    static func mock(
        secureConversations: CoreSdkClient.SecureConversations = .mock,
        fetchFile: @escaping CoreSdkClient.FetchFile = { _, _, _ in },
        uploadFileToEngagement: @escaping CoreSdkClient.UploadFileToEngagement = { _, _, _ in },
        audioSession: Glia.Environment.AudioSession = .mock,
        uuid: @escaping () -> UUID = { .mock },
        fileManager: FoundationBased.FileManager = .mock,
        data: FoundationBased.Data = .mock,
        date: @escaping () -> Date = { .mock },
        gcd: GCD = .mock,
        createThumbnailGenerator: @escaping () -> QuickLookBased.ThumbnailGenerator = { .mock },
        createFileDownload: @escaping FileDownloader.CreateFileDownload = { _, _, _ in .mock() },
        loadChatMessagesFromHistory: @escaping () -> Bool = { false },
        timerProviding: FoundationBased.Timer.Providing = .mock,
        fetchSiteConfigurations: @escaping CoreSdkClient.FetchSiteConfigurations = { _ in },
        getCurrentEngagement: @escaping CoreSdkClient.GetCurrentEngagement = { nil },
        getNonTransferredSecureConversationEngagement: @escaping CoreSdkClient.GetCurrentEngagement = { return nil },
        submitSurveyAnswer: @escaping CoreSdkClient.SubmitSurveyAnswer = { _, _, _, _ in },
        uiApplication: UIKitBased.UIApplication = .mock,
        uiScreen: UIKitBased.UIScreen = .mock,
        notificationCenter: FoundationBased.NotificationCenter = .mock,
        fetchChatHistory: @escaping CoreSdkClient.FetchChatHistory = { _ in },
        listQueues: @escaping CoreSdkClient.GetQueues = { _ in },
        createFileUploader: @escaping FileUploader.Create = FileUploader.mock,
        createFileUploadListModel: @escaping SecureConversations.FileUploadListViewModel.Create = SecureConversations.FileUploadListViewModel.mock(environment:),
        messagesWithUnreadCountLoaderScheduler: CoreSdkClient.ReactiveSwift.DateScheduler = CoreSdkClient.reactiveSwiftDateSchedulerMock,
        markUnreadMessagesDelay: @escaping () -> DispatchQueue.SchedulerTimeType.Stride = { .mock },
        isAuthenticated: @escaping () -> Bool = { false },
        startSocketObservation: @escaping CoreSdkClient.StartSocketObservation = {},
        stopSocketObservation: @escaping CoreSdkClient.StopSocketObservation = {},
        pushNotifications: CoreSdkClient.PushNotifications = .mock,
        createSendMessagePayload: @escaping CoreSdkClient.CreateSendMessagePayload = { _, _ in .mock() },
        orientationManager: OrientationManager = .mock(),
        proximityManager: ProximityManager = .mock,
        log: CoreSdkClient.Logger = .mock,
        snackBar: SnackBar = .mock,
        maximumUploads: @escaping () -> Int = { 2 },
        cameraDeviceManager: @escaping CoreSdkClient.GetCameraDeviceManageable = {
            .mock
        },
        flipCameraButtonStyle: FlipCameraButtonStyle = .nop,
        alertManager: AlertManager = .mock(),
        queuesMonitor: QueuesMonitor = .mock(),
        hasPendingInteraction: @escaping () -> Bool = { false },
        createEntryWidget: @escaping EntryWidgetBuilder = { _ in .mock() },
        dismissManager: GliaPresenter.DismissManager = .init { _, _, _ in },
        combineScheduler: CoreSdkClient.AnyCombineScheduler = .mock
    ) -> Self {
        Self(
            secureConversations: secureConversations,
            fetchFile: fetchFile,
            uploadFileToEngagement: uploadFileToEngagement,
            audioSession: audioSession,
            uuid: uuid,
            fileManager: fileManager,
            data: data,
            date: date,
            gcd: gcd,
            createThumbnailGenerator: createThumbnailGenerator,
            createFileDownload: createFileDownload,
            loadChatMessagesFromHistory: loadChatMessagesFromHistory,
            timerProviding: timerProviding,
            fetchSiteConfigurations: fetchSiteConfigurations,
            getCurrentEngagement: getCurrentEngagement,
            getNonTransferredSecureConversationEngagement: getNonTransferredSecureConversationEngagement,
            submitSurveyAnswer: submitSurveyAnswer,
            uiApplication: uiApplication,
            uiScreen: uiScreen,
            notificationCenter: notificationCenter,
            fetchChatHistory: fetchChatHistory,
            listQueues: listQueues,
            createFileUploader: createFileUploader,
            createFileUploadListModel: createFileUploadListModel,
            messagesWithUnreadCountLoaderScheduler: messagesWithUnreadCountLoaderScheduler,
            markUnreadMessagesDelay: markUnreadMessagesDelay,
            isAuthenticated: isAuthenticated,
            startSocketObservation: startSocketObservation,
            stopSocketObservation: stopSocketObservation,
            pushNotifications: pushNotifications,
            createSendMessagePayload: createSendMessagePayload,
            orientationManager: orientationManager,
            proximityManager: proximityManager,
            log: log,
            snackBar: snackBar,
            maximumUploads: maximumUploads,
            cameraDeviceManager: cameraDeviceManager,
            flipCameraButtonStyle: flipCameraButtonStyle,
            alertManager: alertManager,
            queuesMonitor: queuesMonitor,
            hasPendingInteraction: hasPendingInteraction,
            createEntryWidget: createEntryWidget,
            dismissManager: dismissManager,
            combineScheduler: combineScheduler
        )
    }
}
// swiftlint:enable line_length
#endif
